package dfalearningtoolkit

// RPNIFromDataset returns a DFA and merge data generated by the regular
// positive and negative inference (RPNI) algorithm. It takes a dataset as
// a parameter which is used to generate an APTA while passing it to the RPNI function.
func RPNIFromDataset(dataset Dataset) (DFA, MergeData) {
	// Construct an APTA from the dataset.
	APTA := dataset.GetPTA(true)

	// Call RPNI function using APTA gathered above.
	// Return resultant DFA and merge data.
	return RPNI(APTA)
}

// RPNI returns a DFA and merge data generated by the regular
// positive and negative inference (RPNI) algorithm. It takes an
// APTA as a parameter which is passed to the RPNISearch function.
func RPNI(APTA DFA) (DFA, MergeData) {
	// Convert APTA to StatePartition for state merging.
	statePartition := APTA.ToStatePartition()

	// Call RPNISearch function using state partition and rejecting
	// string examples declared above. This function returns the resultant
	// state partition and the merge data.
	statePartition, mergeData := RPNISearch(statePartition)

	// Convert the state partition to a DFA.
	resultantDFA := statePartition.ToQuotientDFA()

	// Check if DFA generated is valid.
	resultantDFA.IsValidPanic()

	// Return resultant DFA and merge data.
	return resultantDFA, mergeData
}
